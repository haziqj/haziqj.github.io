<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introductory Data Science using R | Haziq Jamil</title><link>https://haziqj.ml/teaching/datascience/</link><atom:link href="https://haziqj.ml/teaching/datascience/index.xml" rel="self" type="application/rss+xml"/><description>Introductory Data Science using R</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-gb</language><copyright>© 2025 Haziq Jamil</copyright><lastBuildDate>Fri, 07 Jun 2019 00:00:00 +0000</lastBuildDate><image><url>https://haziqj.ml/media/icon_hu4b886e67ce091368601699b05489f639_45390_512x512_fill_lanczos_center_3.png</url><title>Introductory Data Science using R</title><link>https://haziqj.ml/teaching/datascience/</link></image><item><title>Data Science Framework</title><link>https://haziqj.ml/teaching/datascience/1-intro/</link><pubDate>Fri, 05 Jul 2019 00:00:00 +0100</pubDate><guid>https://haziqj.ml/teaching/datascience/1-intro/</guid><description>&lt;p>This section to be updated.&lt;/p></description></item><item><title>Getting Started with R</title><link>https://haziqj.ml/teaching/datascience/2-intro-to-r/</link><pubDate>Tue, 09 Jul 2019 00:00:00 +0800</pubDate><guid>https://haziqj.ml/teaching/datascience/2-intro-to-r/</guid><description>&lt;h1 id="key-ideas">Key ideas&lt;/h1>
&lt;h2 id="objects">Objects&lt;/h2>
&lt;p>R works on objects.
All objects have the following properties (referred to as intrinsic attributes):&lt;/p>
&lt;ul>
&lt;li>&lt;code>mode&lt;/code>: tells us what kind of thing the object is – possible modes include numeric, complex, logical, character and list.&lt;/li>
&lt;li>&lt;code>length&lt;/code>: is the number of components that make up the object.&lt;/li>
&lt;/ul>
&lt;p>At the simplest level, an object is a convenient way to store information.
In statistics, we need to store observations of a variable of interest.
This is done using a numeric vector.
Note that there are no scalars in R; a number is just a numeric vector of length 1.
Vectors are referred to as atomic structures; all of their components have the same mode.&lt;/p>
&lt;p>If an object stores information, we need to name it so that we can refer to it later (and thus recover the information that it contains).
The term used for the name of an object is identifier.
An identifier is something that we choose. Identifiers can be chosen fairly freely in R.
The points below are a few simple rules to bear in mind.&lt;/p>
&lt;ul>
&lt;li>In general any combination of letters, digits and the dot character can be used although it is obviously sensible to choose names that are reasonably descriptive.&lt;/li>
&lt;li>You cannot start an identifier with a digit or a dot so &lt;code>moonbase3.sample&lt;/code> is acceptable but &lt;code>3moons.samplebase&lt;/code> and &lt;code>.sample3basemoon&lt;/code> are not.&lt;/li>
&lt;li>Identifiers are CASE SENSITIVE so &lt;code>moon.sample&lt;/code> is different from &lt;code>moon.Sample&lt;/code>. It is easy to get caught out by this.&lt;/li>
&lt;li>Some characters are already assigned values. These include &lt;code>c&lt;/code>, &lt;code>q&lt;/code>, &lt;code>t&lt;/code>, &lt;code>C&lt;/code>, &lt;code>D&lt;/code>, &lt;code>F&lt;/code>, &lt;code>I&lt;/code> and &lt;code>T&lt;/code>. Avoid using these as identifiers.&lt;/li>
&lt;/ul>
&lt;p>Typically we are interested in data sets that consist of several variables.
In R, data sets are represented by an object known as a &lt;em>data frame&lt;/em>.
As with all objects, a data frame has the intrinsic attributes mode and length; data frames are of mode &lt;code>list&lt;/code> and the length of a data frame is the number of variables that is contains.
In common with many larger objects, a data frame has other attributes in addition to mode and length.
The non-intrinsic attributes of a data frame are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>names&lt;/code>: these are the names of the variables that make up the data set;&lt;/li>
&lt;li>&lt;code>row.names&lt;/code>: these are the names of the individuals on whom the observations are made;&lt;/li>
&lt;li>&lt;code>class&lt;/code>: this attribute can be thought of as a detailed specification of the kind of thing the object is; in this case the class is &lt;code>data.frame&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>The class attribute tells certain functions (generic functions) how to deal with the object.
For example, objects of class &amp;ldquo;data.frame&amp;rdquo; are displayed on screen in a particular way.&lt;/p>
&lt;h2 id="functions-arguments-and-return-values">Functions, arguments and return values&lt;/h2>
&lt;p>R works by calling functions.
The notion of a function is a familiar one; a function takes a collection of inputs and maps them to a single output. In R, inputs and output are objects.
The inputs are referred to as &lt;em>arguments&lt;/em> and the output is referred to as the &lt;em>return value&lt;/em>.
Many useful functions are part of the standard R setup. Others are available via the inclusion of packages.
One of the key advantages of R is the ease with which users can define their own functions.
Functions are also objects; the mode of a function is &lt;code>function&lt;/code> (sensibly enough).
In computing, functions have &lt;em>side-effects&lt;/em>.
For example, calling a function may cause a graph to be drawn.
In many instances, it is the side-effect that is important rather than the return value.&lt;/p>
&lt;h2 id="workspace-and-working-directories">Workspace and working directories&lt;/h2>
&lt;p>During an R session, a number of objects will be generated; for example we may generate vectors, data frames and functions.
For the duration of the session, these objects are stored in an area of memory referred to as the workspace.
If we want to save the objects for future use, we instruct R to write them to a file in our current working directory (directory is just another name for a folder).
Note the distinction: things in memory are temporary (they will be lost when we log out); files are more permanent (they are stored on disk and the information they contain can be loaded into memory during our next session).
Managing objects and files is an important part of using R effectively.&lt;/p>
&lt;h1 id="a-new-r-session">A new R session&lt;/h1>
&lt;h2 id="starting-up">Starting up&lt;/h2>
&lt;p>If you haven&amp;rsquo;t already, download R and RStudio based on your operating system.
R can actually be run in the terminal (type &lt;code>r&lt;/code> in your terminal) or the original R program itself.&lt;br>
We will be working in RStudio, which is a user-friendly integrated development environment (IDE).&lt;/p>
&lt;p>It is recommended to create a project, which automatically configures the working directory.
To do this, go to $\text{File} \rightarrow \text{New project&amp;hellip;}$.
If your files are already in a folder, select $\text{Existing Directory}$; otherwise select $\text{New Directory}$.
Don&amp;rsquo;t select $\text{Version Control}$ for now.&lt;/p>
&lt;h2 id="using-r-as-a-calculator">Using R as a calculator&lt;/h2>
&lt;p>The simplest thing that R can do is evaluate arithmetic expressions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">4.23&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 5.23&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="m">3.14&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 2.36&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Note the order in which operations are performed in the final calculation&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Comments in R&lt;/strong>. R ignores anything after a # sign in a command.
We will follow this convention. Anything after a # in a set of R commands is a comment.&lt;/p>
&lt;/blockquote>
&lt;h2 id="vectors-and-assignment">Vectors and assignment&lt;/h2>
&lt;p>We can create vectors at the command prompt using the concatenation function &lt;code>c(...). c(object1,object2,...)&lt;/code>.&lt;/p>
&lt;p>This function takes arguments of the same mode and returns a vector containing these values.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Alpha&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Bravo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Charlie&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] &amp;#34;Alpha&amp;#34; &amp;#34;Bravo&amp;#34; &amp;#34;Charlie&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to make use of vectors, we need identifiers for them (we do not want to have to write vectors from scratch every time we use them).
This is done using the assignment operator &lt;code>&amp;lt;-&lt;/code> via &lt;code>name &amp;lt;- expression&lt;/code>.
&lt;code>name&lt;/code> now refers to an object whose value is the result of evaluating expression.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">people&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Alpha&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Bravo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Charlie&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">people&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] &amp;#34;Alpha&amp;#34; &amp;#34;Bravo&amp;#34; &amp;#34;Charlie&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Typing an object’s identifier causes R to print the contents of the object&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple arithmetic operations can be performed with vectors.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 5 7 9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 2 4 6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">7.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">-2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] -7.0 -5.5 5.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">rep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 12 6 4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note in the above example that multiplication and division are done element by element.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Reusing commands&lt;/strong>. If you want to bring back a command which you have used earlier in the session, press the up arrow key ↑. This allows you to go back through the commands until you find the one you want. The commands reappear at the command line and can be edited and then run by pressing return.&lt;/p>
&lt;/blockquote>
&lt;p>The outcome of an arithmetic calculation can be given an identifier for later use.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">calc1&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">7.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">-2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">calc2&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">calc1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">calc1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">calc1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 9.0 9.5 1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">calc2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 81.00 90.25 1.00&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">calc1&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">calc1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">calc2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 90.00 99.75 2.00&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">calc1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 90.00 99.75 2.00&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">calc2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 81.00 90.25 1.00&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Note: in the final step we have update the value of calc1 by adding calc2 to&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># the old value; calc1 changes but calc2 is unchanged&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we try to add together vectors of different lengths, R uses a recycling rule; the smaller vector is repeated until the dimensions match.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 2 3 4 5 6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">small&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">large&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">large&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">small&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 1 2 1 2 1 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Where have all the objects gone?&lt;/strong> We have defined a lot of variables so far. Inspect the &amp;lsquo;Environment&amp;rsquo; tab to inspect all objects saved in the workspace.&lt;/p>
&lt;/blockquote>
&lt;h3 id="example-sheep-weight">Example: sheep weight&lt;/h3>
&lt;p>We have taken a random sample of the weight of 5 sheep in the UK.
The weights (kg) are 84.5, 72.6, 75.7, 94.8, and 71.3.
We are going to put these values in a vector and illustrate some standard procedures.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">weight&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">84.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">72.6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">75.7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">94.8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">71.3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">weight&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 84.5 72.6 75.7 94.8 71.3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">total&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">weight&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numobs&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">weight&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">meanweight&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">numobs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">meanweight&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 79.78&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># We have worked out the mean the hard way. There is a quick way...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">weight&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 79.78&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="matrices">Matrices&lt;/h2>
&lt;p>Another form of data in &lt;code>R&lt;/code> are matrices. A matrix is formed using the &lt;code>matrix()&lt;/code> function, which takes in a vector argument, plus the number of rows and number of columns the matrix should be. For example, to create a $4 \times 3$ matrix, one types&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mat&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nrow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ncol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mat&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [,1] [,2] [,3]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1,] 1 5 9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [2,] 2 6 10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [3,] 3 7 11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [4,] 4 8 12&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that the matrix is built column by column. If we wish to specify that the matrix be built by filling in the rows first, we use the option &lt;code>byrow = TRUE&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mat&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nrow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byrow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mat&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [,1] [,2] [,3]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [2,] 4 5 6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [3,] 7 8 9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [4,] 10 11 12&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above, we skipped the &lt;code>ncol&lt;/code> argument as it is not needed. If it is unambiguous enough, then you can skip one of &lt;code>nrow&lt;/code> or &lt;code>ncol&lt;/code>, but it is certainly good practice to specify both in order to avoid silly mistakes.&lt;/p>
&lt;p>Remember, &lt;code>R&lt;/code> practices the recycling rule, and this applies even to matrices. The following code will not given an error, but it may not have the intended result.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mat&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nrow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ncol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byrow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">TRUE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mat&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [,1] [,2] [,3]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [2,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [3,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [4,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [5,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [6,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [7,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [8,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [9,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [10,] 1 2 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A very useful class of matrices that you would often encounter is diagonal matrices. These are built using the &lt;code>diag()&lt;/code> function in &lt;code>R&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">diag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># the 3 x3 identity matrix&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [,1] [,2] [,3]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1,] 1 0 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [2,] 0 1 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [3,] 0 0 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">diag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># a diagonal matrix with diagonal entries 1, 2, ..., 5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [,1] [,2] [,3] [,4] [,5]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1,] 1 0 0 0 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [2,] 0 2 0 0 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [3,] 0 0 3 0 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [4,] 0 0 0 4 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [5,] 0 0 0 0 5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="data-frames">Data frames&lt;/h2>
&lt;p>A data frame is an R object that can be thought of as representing a data set.
A data frame consists of variables (columns vectors) of the same length with each row corresponding to an experimental unit.
The general syntax for setting up a data frame is &lt;code>name &amp;lt;- data.frame(variable1, variable2, ...)&lt;/code>.&lt;/p>
&lt;p>Individual variables in a data frame are accessed using the $ notation: &lt;code>name$variable&lt;/code>.&lt;/p>
&lt;p>Once a data frame has been created we can view and edit it in a spreadsheet format using the command &lt;code>fix(...)&lt;/code> (or equivalently &lt;code>data.entry(...)&lt;/code>).
New variables can be added to an existing data frame by assignment.&lt;/p>
&lt;h3 id="example-sheep-again">Example: sheep again&lt;/h3>
&lt;p>Suppose that, for each of the sheep weighed in the example above, we also measure the height at the shoulder. The heights (cm) are 86.5, 71.8, 77.2, 84.9, and 75.4.
We will set up another variable for height. We would also like to have a single structure in which the association between weight and height (that is, that they are two measurements of the same sheep) is made explicit.
This is done by adding each variable to a dataframe.
We will call the data frame sheep and view it using &lt;code>fix(sheep)&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">height&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">86.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">71.8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">77.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">84.9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">75.4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sheep&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">data.frame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">weight&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sheep&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 79.16&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## fix(sheep)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Suppose that a third variable consisting of measurements of the length of the sheeps’ backs becomes available. The values (in cm) are 130.4, 100.2, 109.4, 140.6, and 101.4.
We can include a new variable in the data frame using assignment. Suppose we choose the identifier &lt;code>backlength&lt;/code> for this new variable:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sheep&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">backlength&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">130.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">100.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">109.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">140.6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">101.4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Look at the data in spreadsheet format to check what has happened.&lt;/p>
&lt;h2 id="lists">Lists&lt;/h2>
&lt;p>Lists in &lt;code>R&lt;/code> are objects which can hold various kinds of objects together in one list. The easiest way to explain this is to construct a list:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">my_list&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">list&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">diag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">lm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">rt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">plot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">rnorm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sheep&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">my_list&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## List of 5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## $ a: num 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## $ b: int [1:3, 1:3] 1 0 0 0 2 0 0 0 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## $ c:List of 12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ coefficients : Named num [1:2] -0.13641 0.00289&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..- attr(*, &amp;#34;names&amp;#34;)= chr [1:2] &amp;#34;(Intercept)&amp;#34; &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ residuals : Named num [1:100] 1.814 -0.203 0.631 -0.449 -2.427 ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..- attr(*, &amp;#34;names&amp;#34;)= chr [1:100] &amp;#34;1&amp;#34; &amp;#34;2&amp;#34; &amp;#34;3&amp;#34; &amp;#34;4&amp;#34; ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ effects : Named num [1:100] 1.389 1.013 0.465 -0.614 -2.592 ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..- attr(*, &amp;#34;names&amp;#34;)= chr [1:100] &amp;#34;(Intercept)&amp;#34; &amp;#34;rt(100, 1)&amp;#34; &amp;#34;&amp;#34; &amp;#34;&amp;#34; ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ rank : int 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ fitted.values: Named num [1:100] -0.136 -0.139 -0.135 -0.138 -0.137 ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..- attr(*, &amp;#34;names&amp;#34;)= chr [1:100] &amp;#34;1&amp;#34; &amp;#34;2&amp;#34; &amp;#34;3&amp;#34; &amp;#34;4&amp;#34; ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ assign : int [1:2] 0 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ qr :List of 5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..$ qr : num [1:100, 1:2] -10 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;dimnames&amp;#34;)=List of 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..$ : chr [1:100] &amp;#34;1&amp;#34; &amp;#34;2&amp;#34; &amp;#34;3&amp;#34; &amp;#34;4&amp;#34; ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..$ : chr [1:2] &amp;#34;(Intercept)&amp;#34; &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;assign&amp;#34;)= int [1:2] 0 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..$ qraux: num [1:2] 1.1 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..$ pivot: int [1:2] 1 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..$ tol : num 1e-07&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..$ rank : int 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..- attr(*, &amp;#34;class&amp;#34;)= chr &amp;#34;qr&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ df.residual : int 98&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ xlevels : Named list()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ call : language lm(formula = rnorm(100) ~ 1 + rt(100, 1))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ terms :Classes &amp;#39;terms&amp;#39;, &amp;#39;formula&amp;#39; language rnorm(100) ~ 1 + rt(100, 1)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;variables&amp;#34;)= language list(rnorm(100), rt(100, 1))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;factors&amp;#34;)= int [1:2, 1] 0 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;dimnames&amp;#34;)=List of 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. .. ..$ : chr [1:2] &amp;#34;rnorm(100)&amp;#34; &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. .. ..$ : chr &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;term.labels&amp;#34;)= chr &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;order&amp;#34;)= int 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;intercept&amp;#34;)= int 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;response&amp;#34;)= int 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;.Environment&amp;#34;)=&amp;lt;environment: R_GlobalEnv&amp;gt; &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;predvars&amp;#34;)= language list(rnorm(100), rt(100, 1))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. ..- attr(*, &amp;#34;dataClasses&amp;#34;)= Named chr [1:2] &amp;#34;numeric&amp;#34; &amp;#34;numeric&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;names&amp;#34;)= chr [1:2] &amp;#34;rnorm(100)&amp;#34; &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ model :&amp;#39;data.frame&amp;#39;: 100 obs. of 2 variables:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..$ rnorm(100): num [1:100] 1.678 -0.343 0.497 -0.586 -2.564 ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..$ rt(100, 1): num [1:100] 0.157 -1.019 0.578 -0.404 -0.263 ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. ..- attr(*, &amp;#34;terms&amp;#34;)=Classes &amp;#39;terms&amp;#39;, &amp;#39;formula&amp;#39; language rnorm(100) ~ 1 + rt(100, 1)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;variables&amp;#34;)= language list(rnorm(100), rt(100, 1))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;factors&amp;#34;)= int [1:2, 1] 0 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. .. ..- attr(*, &amp;#34;dimnames&amp;#34;)=List of 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. .. .. ..$ : chr [1:2] &amp;#34;rnorm(100)&amp;#34; &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. .. .. ..$ : chr &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;term.labels&amp;#34;)= chr &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;order&amp;#34;)= int 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;intercept&amp;#34;)= int 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;response&amp;#34;)= int 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;.Environment&amp;#34;)=&amp;lt;environment: R_GlobalEnv&amp;gt; &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;predvars&amp;#34;)= language list(rnorm(100), rt(100, 1))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. ..- attr(*, &amp;#34;dataClasses&amp;#34;)= Named chr [1:2] &amp;#34;numeric&amp;#34; &amp;#34;numeric&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## .. .. .. .. ..- attr(*, &amp;#34;names&amp;#34;)= chr [1:2] &amp;#34;rnorm(100)&amp;#34; &amp;#34;rt(100, 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..- attr(*, &amp;#34;class&amp;#34;)= chr &amp;#34;lm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## $ d: NULL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## $ e:&amp;#39;data.frame&amp;#39;: 5 obs. of 3 variables:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ weight : num [1:5] 84.5 72.6 75.7 94.8 71.3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ height : num [1:5] 86.5 71.8 77.2 84.9 75.4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ..$ backlength: num [1:5] 130 100 109 141 101&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above example, &lt;code>my_list&lt;/code> is an &lt;code>R&lt;/code> list which contains 5 entries. The first entry called &lt;code>a&lt;/code> is simply a number (or a vector of length 1). The second entry called &lt;code>b&lt;/code> is a matrix. The third entry called &lt;code>c&lt;/code> is a linear model. The fourth entry called &lt;code>d&lt;/code> is a plot. Finally the fifth entry called &lt;code>e&lt;/code> is a data frame. A list may be named (e.g. &lt;code>a&lt;/code> to &lt;code>e&lt;/code> above), or they need not be named.&lt;/p>
&lt;p>What is clear is that a list is able to hold not just one type of object, but various kinds of objects. This makes it useful to hold information or results for retrieval later, or for saving. Complex functions usually output a list rather than just singular objects.&lt;/p>
&lt;h2 id="subsetting">Subsetting&lt;/h2>
&lt;p>In &lt;code>R&lt;/code>, subsetting is done using square brackets:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a[3]&lt;/span> &lt;span class="c1"># subset the 3rd element in the vector&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a[1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="c1"># subset the first 5 elements&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 1 2 3 4 5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a[a&lt;/span> &lt;span class="o">%%&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="c1"># subset even elements only (note: the &amp;#39;%%&amp;#39; operator gives the remainder)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 2 4 6 8 10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is also possible to index matrices and dataframes&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mat[2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="c1"># get the (2,3) element from the matrix&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sheep[1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="c1"># get the first element in the 2nd column&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 86.5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For data frames, you&amp;rsquo;ve seen that it is possible to use the &lt;code>$&lt;/code> symbol to get the columns. From this, it is vectorised so it&amp;rsquo;s further possible to subset using &lt;code>[]&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sheep&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">height[1]&lt;/span> &lt;span class="c1"># the first sheep&amp;#39;s height&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 86.5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="r-management">R management&lt;/h1>
&lt;h2 id="the-r-help-system">The R help system&lt;/h2>
&lt;p>There are a number of different ways of getting help in R.&lt;/p>
&lt;ul>
&lt;li>If you have a query about a specific function then typing ? and then the functions name at the prompt will bring up the relevant help page.&lt;/li>
&lt;li>If your problem is of a more general nature, then typing help.start() will open up a window which allows you to browse for the information you want. The search engine on this page is very helpful for finding context specific information.&lt;/li>
&lt;/ul>
&lt;p>Alternatively, click on the &amp;lsquo;Help&amp;rsquo; tab and search for a term that you would like help on.&lt;/p>
&lt;h2 id="session-management-and-visibility">Session management and visibility&lt;/h2>
&lt;p>All of the objects created during an R session are stored in a workspace in memory. We can see the objects that are currently in the workspace by using the command &lt;code>objects()&lt;/code>.
Notice the &lt;code>()&lt;/code>, these are vital for the command to work.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">objects&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] &amp;#34;a&amp;#34; &amp;#34;calc1&amp;#34; &amp;#34;calc2&amp;#34; &amp;#34;delete_files&amp;#34; &amp;#34;height&amp;#34; &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [6] &amp;#34;large&amp;#34; &amp;#34;mat&amp;#34; &amp;#34;meanweight&amp;#34; &amp;#34;my_list&amp;#34; &amp;#34;numbers&amp;#34; &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [11] &amp;#34;numobs&amp;#34; &amp;#34;people&amp;#34; &amp;#34;sheep&amp;#34; &amp;#34;small&amp;#34; &amp;#34;total&amp;#34; &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [16] &amp;#34;weight&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The information in the variables height and weight is currently encapsulated in the data frame sheep.
We can tidy up our workspace by removing the height and weight variables (and various others that we are no longer interested in) using the &lt;code>rm()&lt;/code> function.
Do this and then check what is left.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">rm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">meanweight&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numobs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">objects&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] &amp;#34;a&amp;#34; &amp;#34;calc1&amp;#34; &amp;#34;calc2&amp;#34; &amp;#34;delete_files&amp;#34; &amp;#34;large&amp;#34; &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [6] &amp;#34;mat&amp;#34; &amp;#34;my_list&amp;#34; &amp;#34;numbers&amp;#34; &amp;#34;people&amp;#34; &amp;#34;sheep&amp;#34; &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [11] &amp;#34;small&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The height and weight variables are now only accessible via the sheep data frame.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## weight # should get an error message&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sheep&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">weight&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [1] 84.5 72.6 75.7 94.8 71.3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can save the current workspace to file at any time.
The command to do so is &lt;code>save.image()&lt;/code>.
However, RStudio makes it simple to save the current workspace.
Since we have created a project, workspace saving is handled for us, and we are prompted to save when we quit RStudio or close the project.&lt;/p>
&lt;p>To inspect our working directory, use the &lt;code>dir()&lt;/code> command.
We can also look at the files under the &amp;lsquo;Files&amp;rsquo; tab.&lt;/p>
&lt;!-- ## Properties of objects -->
&lt;!-- We have already used the function `length()` to get the length of a vector. -->
&lt;!-- This can be applied to other objects. -->
&lt;!-- ```{r, collapse = TRUE, eval = 2} -->
&lt;!-- length(sheep2) -->
&lt;!-- length(plot) -->
&lt;!-- ``` -->
&lt;!-- The length of a data frame is the number of variables it contains. -->
&lt;!-- The length of a function can be evaluated but is a bit meaningless. -->
&lt;!-- The function `mode()` gives us the mode of an object, while `attributes()` lists the non-intrinsic attributes. -->
&lt;!-- ```{r, collapse = TRUE, eval = 2} -->
&lt;!-- mode(sheep2) -->
&lt;!-- attributes(sheep2) -->
&lt;!-- attributes(plot) -->
&lt;!-- ``` -->
&lt;!-- Notice that, although both are of mode "list", data frames are of class "data.frame" while linear model objects are of class "lm". -->
&lt;!-- This influences the way they appear on screen when you type the identifier. -->
&lt;h2 id="writing-your-own-functions">Writing your own functions&lt;/h2>
&lt;p>Every function in R has three basic parts: a name, a body of code, and a set of arguments.
To make your own function, you need to replicate these parts and store them in an R object, which you can do with the &lt;code>function()&lt;/code> function. To do this, call &lt;code>function()&lt;/code> and follow it with a pair of braces, &lt;code>{}&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">my_fun&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">what.to.print&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">is.null&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">what.to.print&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="n">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">what.to.print&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is a simple function to print some text to the R console.
Try it out:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">my_fun&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## [1] &amp;#34;Hello world!&amp;#34;
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">my_fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;All your base are belong to us&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## [1] &amp;#34;All your base are belong to us&amp;#34;
&lt;/code>&lt;/pre>&lt;h2 id="installing-packages">Installing packages&lt;/h2>
&lt;p>R has a very diverse user-contributed package repository called the Comprehensive R Archive Network (CRAN).
Packages are nothing more than a collection of user-written functions that serve a particular purpose.
For example, there are packages for extending the graphics capabilities of R (&lt;code>ggplot2&lt;/code>), random-effects modelling (&lt;code>lme4&lt;/code>), latent variable modelling (&lt;code>lavaan&lt;/code>), adn so on.
These aim to supplement base R with additional functionality.&lt;/p>
&lt;p>&amp;ldquo;Official&amp;rdquo; packages are downloaded from CRAN and installed by users all over the world.
Packages that go are published on CRAN have gone through the necessary checks to ensure that they do not break when installed by R users.&lt;/p>
&lt;p>To install packages from CRAN, the command is &lt;code>install.packages()&lt;/code>.
It is much easier, however, to use the GUI in RStudio to install packages.
Hit the &amp;lsquo;Packages&amp;rsquo; tab, click install, then search for the package that you want.&lt;/p>
&lt;p>Packages do not necessarily have to be installed from CRAN.
You can create an R package yourself and distributed either in compressed form via e-mail or USB stick, or host it on a version-control software development site like GitHub.
If you would like to know more about creating your own packages, read this &lt;a href="http://r-pkgs.had.co.nz" target="_blank" rel="noopener">book&lt;/a> (R Packages by Hadley Wickham).&lt;/p>
&lt;h2 id="loading-packages-to-be-used">Loading packages to be used&lt;/h2>
&lt;p>Installing packages makes them available for use, but does not load them when you start R.
Every time you quit an R session and you start it back up again, you would have to load packages that you need all over again.&lt;/p>
&lt;p>The command to load packages is &lt;code>library(&amp;lt;pkg name&amp;gt;)&lt;/code>.
For example&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidyverse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## ── Attaching packages ───────────────────────────────────────────────────────────── tidyverse 1.3.0 ──
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>## ✓ ggplot2 3.3.2 ✓ purrr 0.3.4
## ✓ tibble 3.0.3 ✓ dplyr 1.0.0
## ✓ tidyr 1.1.0 ✓ stringr 1.4.0
## ✓ readr 1.3.1 ✓ forcats 0.5.0
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>## ── Conflicts ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## x dplyr::filter() masks stats::filter()
## x dplyr::lag() masks stats::lag()
&lt;/code>&lt;/pre></description></item><item><title>Useful data science functions in R</title><link>https://haziqj.ml/teaching/datascience/3-r4ds/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0800</pubDate><guid>https://haziqj.ml/teaching/datascience/3-r4ds/</guid><description>&lt;p>As usual, before starting, load all the packages you need.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tidyverse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4
## ✓ tibble 3.1.4 ✓ dplyr 1.0.7
## ✓ tidyr 1.1.3 ✓ stringr 1.4.0
## ✓ readr 2.0.1 ✓ forcats 0.5.1
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## x dplyr::filter() masks stats::filter()
## x dplyr::lag() masks stats::lag()
&lt;/code>&lt;/pre>&lt;h1 id="data-management">Data management&lt;/h1>
&lt;h2 id="importing-data-sets">Importing data sets&lt;/h2>
&lt;p>Data can be imported by going to $\text{File}\rightarrow\text{Import Dataset}$.
Alternatively, the code is&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># code for importing data&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="converting-to-tibbles">Converting to tibbles&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">as_tibble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iris&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## # A tibble: 150 × 5
## Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;
## 1 5.1 3.5 1.4 0.2 setosa
## 2 4.9 3 1.4 0.2 setosa
## 3 4.7 3.2 1.3 0.2 setosa
## 4 4.6 3.1 1.5 0.2 setosa
## 5 5 3.6 1.4 0.2 setosa
## 6 5.4 3.9 1.7 0.4 setosa
## 7 4.6 3.4 1.4 0.3 setosa
## 8 5 3.4 1.5 0.2 setosa
## 9 4.4 2.9 1.4 0.2 setosa
## 10 4.9 3.1 1.5 0.1 setosa
## # … with 140 more rows
&lt;/code>&lt;/pre>&lt;h2 id="subsetting">Subsetting&lt;/h2>
&lt;p>To extract columns, use the &lt;code>$&lt;/code> symbol.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">iris&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">Sepal.Length&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1
## [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0
## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5
## [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1
## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5
## [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3
## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2
## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8
## [145] 6.7 6.7 6.3 6.5 6.2 5.9
&lt;/code>&lt;/pre>&lt;h2 id="reshaping">Reshaping&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">reshape2&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">melt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">diamonds&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">cut&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">diamonds&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cut&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## cut color value
## 1 Fair D 163
## 2 Good D 662
## 3 Very Good D 1513
## 4 Premium D 1603
## 5 Ideal D 2834
## 6 Fair E 224
## 7 Good E 933
## 8 Very Good E 2400
## 9 Premium E 2337
## 10 Ideal E 3903
## 11 Fair F 312
## 12 Good F 909
## 13 Very Good F 2164
## 14 Premium F 2331
## 15 Ideal F 3826
## 16 Fair G 314
## 17 Good G 871
## 18 Very Good G 2299
## 19 Premium G 2924
## 20 Ideal G 4884
## 21 Fair H 303
## 22 Good H 702
## 23 Very Good H 1824
## 24 Premium H 2360
## 25 Ideal H 3115
## 26 Fair I 175
## 27 Good I 522
## 28 Very Good I 1204
## 29 Premium I 1428
## 30 Ideal I 2093
## 31 Fair J 119
## 32 Good J 307
## 33 Very Good J 678
## 34 Premium J 808
## 35 Ideal J 896
&lt;/code>&lt;/pre>&lt;h1 id="variation">Variation&lt;/h1>
&lt;h2 id="continuous-variables">Continuous variables&lt;/h2>
&lt;h3 id="5-point-summaries">5-point summaries&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">summary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iris&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## Sepal.Length Sepal.Width Petal.Length Petal.Width
## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100
## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300
## Median :5.800 Median :3.000 Median :4.350 Median :1.300
## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199
## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800
## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500
## Species
## setosa :50
## versicolor:50
## virginica :50
##
##
##
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reshape2&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">melt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iris&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">variable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_boxplot&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## Using Species as id variables
&lt;/code>&lt;/pre>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-7-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;p>Note: in the above code, we used the &lt;code>melt()&lt;/code> function in &lt;code>reshape2&lt;/code> package to aggregate the data.
Explore what &lt;code>melt()&lt;/code> does by running it in the console.&lt;/p>
&lt;h3 id="histograms">Histograms&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iris&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Sepal.Length&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_histogram&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
&lt;/code>&lt;/pre>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-8-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;h3 id="density-plots">Density plots&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iris&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Sepal.Length&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_density&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;blue&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-9-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;h2 id="discrete-variables">Discrete variables&lt;/h2>
&lt;h3 id="frequency-tables">Frequency tables&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>##
## 2seater compact midsize minivan pickup subcompact suv
## 5 47 41 11 33 35 62
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">prop.table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>##
## 2seater compact midsize minivan pickup subcompact suv
## 0.02136752 0.20085470 0.17521368 0.04700855 0.14102564 0.14957265 0.26495726
&lt;/code>&lt;/pre>&lt;h3 id="barplots">Barplots&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">reorder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FUN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">labs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Class&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-11-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;p>Note: The &lt;code>reorder()&lt;/code> function sorts the bars&amp;hellip; the syntax is a bit tricky to understand, so take it as is for now.&lt;/p>
&lt;h1 id="covariation">Covariation&lt;/h1>
&lt;h2 id="continuous-variables-1">Continuous variables&lt;/h2>
&lt;h3 id="scatter-plots">Scatter plots&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">displ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hwy&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_point&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-12-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;h3 id="smooth-lines">Smooth lines&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">displ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hwy&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_smooth&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;
&lt;/code>&lt;/pre>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-13-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;h3 id="binning">Binning&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">displ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hwy&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_boxplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">group&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">cut_width&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">displ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0.5&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-14-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;h2 id="discrete-variables-1">Discrete variables&lt;/h2>
&lt;h3 id="contingency-tables">Contingency tables&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">diamonds&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">cut&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">diamonds&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>##
## D E F G H I J
## Fair 163 224 312 314 303 175 119
## Good 662 933 909 871 702 522 307
## Very Good 1513 2400 2164 2299 1824 1204 678
## Premium 1603 2337 2331 2924 2360 1428 808
## Ideal 2834 3903 3826 4884 3115 2093 896
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">diamonds&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">cut&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">diamonds&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>##
## Fair Good Very Good Premium Ideal
## D 163 662 1513 1603 2834
## E 224 933 2400 2337 3903
## F 312 909 2164 2331 3826
## G 314 871 2299 2924 4884
## H 303 702 1824 2360 3115
## I 175 522 1204 1428 2093
## J 119 307 678 808 896
&lt;/code>&lt;/pre>&lt;h3 id="count-plots">Count plots&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">diamonds&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mapping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cut&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-16-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;h3 id="heat-maps">Heat maps&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">dat&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">reshape2&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="nf">melt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">diamonds&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">cut&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">diamonds&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cut&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cut&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_tile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mapping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-17-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;h2 id="continuous-x-discrete">Continuous x discrete&lt;/h2>
&lt;h3 id="faceting">Faceting&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">displ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hwy&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_point&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">facet_wrap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span> &lt;span class="n">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nrow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-18-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p>
&lt;h3 id="adding-additional-aesthetics">Adding additional aesthetics&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ggplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">aes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">displ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hwy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">col&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">class&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">geom_point&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="unnamed-chunk-19-1.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;!-- -->&lt;/p></description></item><item><title>Kiva.org assignment</title><link>https://haziqj.ml/teaching/datascience/4-assignment/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0100</pubDate><guid>https://haziqj.ml/teaching/datascience/4-assignment/</guid><description>&lt;h2 id="assignment">Assignment&lt;/h2>
&lt;p>You are tasked with conducting an exploratory data analysis of the &lt;a href="https://www.kaggle.com/ambarish/kiva-data-analysis-w-naive-poverty-metric/data" target="_blank" rel="noopener">Kiva.org&lt;/a> loans data set.
In particular, focus on the following tasks:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Investigate the relationship between the loan taker&amp;rsquo;s ability to pay and the usage of the loan (what it was funded for).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Preliminary analysis of predictive risk for new clients. What sort of characteristics are associated with high defaulting loans?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Explore interesting statistics segregated by regions, e.g. in Asia, what are loans most used for?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Can it be said that the Kiva.org loans make a positive impact to society? Perhaps, a region which sees a large number of approved microloans will measure better on a certain metric (e.g. unemployment rate) than in areas do not?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Is there any evidence of gender discrepancy in the number or amount of loans being funded?&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="instructions">Instructions&lt;/h2>
&lt;p>For each of the questions above, think about&lt;/p>
&lt;ul>
&lt;li>What data do you need?&lt;/li>
&lt;li>What transformations and summaries do you need to perform on the data?&lt;/li>
&lt;li>What kind of plots do you want to visualise?&lt;/li>
&lt;/ul>
&lt;p>Prepare an R script file containing the R code that you used for all of your exploratory analysis of the data set, including &lt;strong>importing, transforming, visualising, and any statistical summaries&lt;/strong> of the data.&lt;/p>
&lt;p>The R script file should be clearly anotated with your comments, such that the next person who reads your R script understands the intent behind your code.&lt;/p>
&lt;p>Make use of commenting to write down any notes or conclusions that you have regarding the analyses.&lt;/p>
&lt;h2 id="data-set">Data set&lt;/h2>
&lt;p>The main data set that you will have at your disposal are the four .csv files from &lt;a href="https://www.kaggle.com/ambarish/kiva-data-analysis-w-naive-poverty-metric/data" target="_blank" rel="noopener">Kaggle&lt;/a>.
You might find that there are data that you require for your analysis that is not present in the data set.
Try to find additional sources of data from the web for your needs.&lt;/p>
&lt;h2 id="presenting-your-work">Presenting your work&lt;/h2>
&lt;p>Submit your R script to me for evaluation.
The fourth lecture of this course will be dedicated to a group discussion of the five exploratory data analysis tasks above.&lt;/p></description></item></channel></rss>